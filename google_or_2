from ortools.constraint_solver import routing_enums_pb2
from ortools.constraint_solver import pywrapcp

def create_data_model():
    """Stores the data for the problem."""
    data = {}
    data['distance_matrix'] = [
        [0, 2, 9, 10, 3],  # Distances from location 0
        [2, 0, 6, 4, 3],   # Distances from location 1
        [9, 6, 0, 8, 5],   # Distances from location 2
        [10, 4, 8, 0, 7],  # Distances from location 3
        [3, 3, 5, 7, 0],   # Distances from location 4
    ]

    data['num_vehicles'] = 2
    data['depot'] = 0
    return data

def print_solution(data, manager, routing, solution):
    """Prints solution on console."""
    time_dimension = routing.GetDimensionOrDie('Time')
    total_time = 0
    for vehicle_id in range(data['num_vehicles']):
        index = routing.Start(vehicle_id)
        plan_output = 'Route for vehicle {}:\n'.format(vehicle_id)
        route_time = 0
        while not routing.IsEnd(index):
            time_var = time_dimension.CumulVar(index)
            plan_output += '{0} Time({1},{2}) -> '.format(
                manager.IndexToNode(index),
                solution.Min(time_var),
                solution.Max(time_var))
            previous_index = index
            index = solution.Value(routing.NextVar(index))
            route_time += routing.GetArcCostForVehicle(previous_index, index, vehicle_id)
        time_var = time_dimension.CumulVar(index)
        plan_output += '{0} Time({1},{2})\n'.format(manager.IndexToNode(index),
                                                    solution.Min(time_var),
                                                    solution.Max(time_var))
        plan_output += 'Time of the route: {}min\n'.format(route_time)
        print(plan_output)
        total_time += route_time
    print('Total time of all routes: {}min'.format(total_time))

def attempt_to_solve(data, manager, routing, priority_requests):
    
    # Create and register a transit callback.
    def distance_callback(from_index, to_index):
        """Returns the distance between the two nodes."""
        # Convert from routing variable Index to distance matrix NodeIndex.
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        return data['distance_matrix'][from_node][to_node]

    transit_callback_index = routing.RegisterTransitCallback(distance_callback)

    # Define cost of each arc.
    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)

    # Add Time Window constraint.
    def time_callback(from_index, to_index):
        """Returns the travel time between the two nodes."""
        # ... (similar to distance_callback, but returns time)
        return data['distance_matrix'][manager.IndexToNode(from_index)][manager.IndexToNode(to_index)]

    time_callback_index = routing.RegisterTransitCallback(time_callback)
    routing.AddDimension(
        time_callback_index,
        30,  # allow waiting time
        30,  # maximum time per vehicle
        False,  # Don't force start cumul to zero.
        'Time')

    time_dimension = routing.GetDimensionOrDie('Time')
    '''
    # Add time window constraints for each location except depot.
    for location_idx, time_window in enumerate(data['time_windows']):
        if location_idx == data['depot']:
            continue
        index = manager.NodeToIndex(location_idx)
        time_dimension.CumulVar(index).SetRange(time_window[0], time_window[1])
    
    # Add time window constraints for each vehicle start node
    for vehicle_id in range(data['num_vehicles']):
        index = routing.Start(vehicle_id)
        start_time, end_time = data['time_windows'][data['depot']]
        time_dimension.CumulVar(index).SetRange(start_time, end_time)
    '''

    # Add pickup and delivery requests
    for request in priority_requests:
        pickup_index = manager.NodeToIndex(request['pickup'])
        delivery_index = manager.NodeToIndex(request['delivery'])

        pickup_start, pickup_end = request['pickup_time_window']
        delivery_start, delivery_end = request['delivery_time_window']
        
        time_dimension.CumulVar(pickup_index).SetRange(pickup_start, pickup_end)
        time_dimension.CumulVar(delivery_index).SetRange(delivery_start, delivery_end)

        routing.AddPickupAndDelivery(pickup_index, delivery_index)
        routing.solver().Add(
            routing.VehicleVar(pickup_index) == routing.VehicleVar(delivery_index))
        routing.solver().Add(
            time_dimension.CumulVar(pickup_index) <=
            time_dimension.CumulVar(delivery_index))
    print(priority_requests)
    # Setting first solution heuristic.
    search_parameters = pywrapcp.DefaultRoutingSearchParameters()
    search_parameters.first_solution_strategy = (
        routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)

    # Solve the problem
    solution = routing.SolveWithParameters(search_parameters)
    if solution:   
        return solution  # All requests fulfilled
    else:
        return None  # No solution found

def main():
    # Instantiate the data problem.
    data = create_data_model()

    # Create the routing index manager.
    manager = pywrapcp.RoutingIndexManager(len(data['distance_matrix']), data['num_vehicles'], data['depot'])

    # Create Routing Model.
    routing = pywrapcp.RoutingModel(manager)

    requests_with_priority = [
        {'pickup': 1, 'delivery': 3, 'priority': 5, 'pickup_time_window': (0, 50), 'delivery_time_window': (0, 50)},
        {'pickup': 2, 'delivery': 4, 'priority': 3, 'pickup_time_window': (0, 1), 'delivery_time_window': (0, 1)},
        # ... additional requests
    ]

    # Sort requests by priority (lowest first)
    sorted_requests = sorted(requests_with_priority, key=lambda x: x['priority'])
    while len(sorted_requests) > 0: 
        # Recreate the routing model
        manager = pywrapcp.RoutingIndexManager(len(data['distance_matrix']), data['num_vehicles'], data['depot'])
        routing = pywrapcp.RoutingModel(manager)

        # Attempt to solve with the current set of requests
        solution = attempt_to_solve(data, manager, routing, sorted_requests)
        if solution: 
            print_solution(data, manager, routing, solution)
            break
        else:
            # Remove the request with the lowest priority
            sorted_requests.pop(0)

if __name__ == '__main__':
    main()
